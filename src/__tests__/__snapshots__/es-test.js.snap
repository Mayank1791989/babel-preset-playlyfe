// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Support disable import conversion 1`] = `
"
import { test } from 'test';
console.log('test');"
`;

exports[`default dont transform transform async await 1`] = `
"\\"use strict\\";

async function test() {
  var a = await test2();
}"
`;

exports[`transform if Async await enabled 1`] = `
"\\"use strict\\";

var test = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var a;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return test2();

          case 2:
            a = _context.sent;

          case 3:
          case \\"end\\":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function test() {
    return _ref.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\\"next\\", value); }, function (err) { step(\\"throw\\", err); }); } } return step(\\"next\\"); }); }; }"
`;
